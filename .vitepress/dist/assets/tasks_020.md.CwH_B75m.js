import{_ as t,c as l,o as a,a2 as e}from"./chunks/framework.C94oF1kp.js";const i="/assets/4.DB8_A8bF.png",f=JSON.parse('{"title":"Структура данных «Дерево». Обход деревьев.","description":"","frontmatter":{},"headers":[],"relativePath":"tasks/020.md","filePath":"tasks/020.md"}'),o={name:"tasks/020.md"},s=e('<h1 id="структура-данных-«дерево»-обход-деревьев" tabindex="-1">Структура данных «Дерево». Обход деревьев. <a class="header-anchor" href="#структура-данных-«дерево»-обход-деревьев" aria-label="Permalink to &quot;Структура данных «Дерево». Обход деревьев.&quot;">​</a></h1><h2 id="определения" tabindex="-1">Определения <a class="header-anchor" href="#определения" aria-label="Permalink to &quot;Определения&quot;">​</a></h2><ol><li><p><strong>Прямой обход</strong> обычно относится к базовому способу обхода дерева или графа, где мы начинаем с определенной вершины и посещаем все ее непосещенные соседи, прежде чем переходить к следующей вершине. Это может быть как обход в <code>глубину (DFS)</code>, так и обход в <code>ширину (BFS)</code>, в зависимости от того, какой порядок посещения вершин предпочтительнее в данном случае.</p><ul><li>Посещение корневого узла</li><li>Рекурсивный обход левого поддерева</li><li>Рекурсивный обход правого поддерева</li></ul></li><li><p><strong>Симметричный обход.</strong> При симметричном обходе мы проходим по пути к самому левому потомку, затем возвращаемся к корню, посещаем его и следуем к правому потомку.</p><ul><li>Рекурсивный обход левого поддерева</li><li>Посещение корневого узла</li><li>Рекурсивный обход правого поддерева</li></ul></li><li><p><strong>Обратный обход.</strong> При обратном подходе мы сначала посещаем левого потомка, затем правого и по завершении обхода поддеревьев считываем корень. (Листья считаем сразу, узлы если два раза коснулись)</p><ul><li>Рекурсивный обход левого поддерева</li><li>Рекурсивный обход правого поддерева</li><li>Посещение корневого узла</li></ul></li></ol><p><img src="'+i+'" alt=""></p>',4),r=[s];function n(_,c,d,p,h,u){return a(),l("div",null,r)}const g=t(o,[["render",n]]);export{f as __pageData,g as default};
