import{_ as l,c as e,o as a,a2 as i}from"./chunks/framework.C94oF1kp.js";const m=JSON.parse('{"title":"Понятие «структура данных». Классификация структур данных.","description":"","frontmatter":{},"headers":[],"relativePath":"tasks/002.md","filePath":"tasks/002.md"}'),o={name:"tasks/002.md"},t=i('<h1 id="понятие-«структура-данных»-классификация-структур-данных" tabindex="-1">Понятие «структура данных». Классификация структур данных. <a class="header-anchor" href="#понятие-«структура-данных»-классификация-структур-данных" aria-label="Permalink to &quot;Понятие «структура данных». Классификация структур данных.&quot;">​</a></h1><h2 id="понятие-«структура-данных»" tabindex="-1">Понятие «структура данных» <a class="header-anchor" href="#понятие-«структура-данных»" aria-label="Permalink to &quot;Понятие «структура данных»&quot;">​</a></h2><p><strong>Структура данных</strong> — программная единица, позволяющая хранить и обрабатывать данные, а также обеспечивающая их эффективное использование. Данные при этом должны быть однотипными или логически связанными. В общем, это набор данных, связанных определенным образом.<br><strong>Структура данных</strong> — это множество элементов данных и множество связей между ними.</p><h2 id="классификация-структур-данных" tabindex="-1">Классификация структур данных <a class="header-anchor" href="#классификация-структур-данных" aria-label="Permalink to &quot;Классификация структур данных&quot;">​</a></h2><h6 id="по-способу-представления-в-памяти" tabindex="-1">ПО СПОСОБУ ПРЕДСТАВЛЕНИЯ В ПАМЯТИ <a class="header-anchor" href="#по-способу-представления-в-памяти" aria-label="Permalink to &quot;ПО СПОСОБУ ПРЕДСТАВЛЕНИЯ В ПАМЯТИ&quot;">​</a></h6><p>Рассмотреть данные можно с двух сторон:</p><ul><li><code>Физические структуры данных</code> — отражает способ представления данных в памяти ЭВМ и называется еще структурой хранения или структурой памяти.</li><li><code>Логические структуры данных</code> — рассмотрение данных без учета их представления в памяти компьютера.</li></ul><h6 id="по-типу-связеи" tabindex="-1">ПО ТИПУ СВЯЗЕЙ <a class="header-anchor" href="#по-типу-связеи" aria-label="Permalink to &quot;ПО ТИПУ СВЯЗЕЙ&quot;">​</a></h6><p>Типы структур данных по наличию связи:</p><ul><li><code>Несвязные структуры</code>: массивы, векторы, строки, стеки, очереди.</li><li><code>Связные структуры</code>: связные списки.</li></ul><h6 id="по-степени-сложности" tabindex="-1">ПО СТЕПЕНИ СЛОЖНОСТИ <a class="header-anchor" href="#по-степени-сложности" aria-label="Permalink to &quot;ПО СТЕПЕНИ СЛОЖНОСТИ&quot;">​</a></h6><ul><li><code>Простые структуры данных</code> — такие структуры, которые не могут быть расчленены на составные части большие, чем биты (например массивы).</li></ul><ul><li><code>Интегрированные структуры данных</code> — структуры данных составными частями которых являются другие структуры данных — простые или интегрированные.</li></ul><h6 id="по-типу-изменчивости" tabindex="-1">ПО ТИПУ ИЗМЕНЧИВОСТИ <a class="header-anchor" href="#по-типу-изменчивости" aria-label="Permalink to &quot;ПО ТИПУ ИЗМЕНЧИВОСТИ&quot;">​</a></h6><p>Речь идёт об изменении числа элементов или связей между ними</p><ul><li><p><code>Статические</code> — размер памяти компьютера, отводимый для таких данных, постоянен и выделяется на этапе компиляции или выполнения программы:</p><ul><li>массивы</li><li>множества</li><li>векторы</li></ul></li><li><p><code>Полустатические</code> — они имеют переменную длину и простые способы ее изменения; изменение длины структуры происходит в определенных пределах, не превышая какого-то максимального (предельного) значения:</p><ul><li>стек</li><li>очередь</li><li>строка</li></ul></li><li><p><code>Динамические</code> — структуры не имеют постоянного размера, поэтому память под отдельные элементы таких структур выделяется в момент, когда они создаются в процессе выполнения программы, а не во время трансляции:</p><ul><li>cвязные списки</li><li>графы</li><li>деревья</li></ul></li></ul><h6 id="по-способу-организации-элементов" tabindex="-1">ПО СПОСОБУ ОРГАНИЗАЦИИ ЭЛЕМЕНТОВ <a class="header-anchor" href="#по-способу-организации-элементов" aria-label="Permalink to &quot;ПО СПОСОБУ ОРГАНИЗАЦИИ ЭЛЕМЕНТОВ&quot;">​</a></h6><p>В зависимости от признака упорядоченности элементов различают два типа структур организации данных:</p><ul><li><p><code>Нелинейные</code> — деревья, графы, сплетения (он же многосвязный список или плекс — объединяет в себе дерево, граф и список) пример:</p><p><img src="https://lh7-us.googleusercontent.com/docsz/AD_4nXftd-AEI-algaiC3Dcmj4GWuf9Y1CBQJQxu-uRvPe3jjDkYm__qnqEJoaVnMIQ6Yomq89jiQS8bJge5fXVn6gy3G_LzxpNB15U_bIPG_0DV-GI33fSELdlsFditUaDOC1aHJfC6BxWumSEr0xHrf6DT549b?key=9gziK4gT-jwK64_BpOeehQ" alt=""></p></li><li><p><code>Линейные</code></p><ul><li><code>Картезианские (прямоугольные)</code> — структуры названы так по способу записи данных в виде прямоугольных таблиц: <ul><li>A=(6 3) - матрица</li><li>В = (9, 3, 6, 5) - вектор</li><li>Z = {7, 6, 0, 2, 3} - множество элементов</li></ul></li><li><code>Строчные</code> - одномерные, динамически изменяемые структуры данных, различающиеся способами включения исключения элементов: <ul><li>стек</li><li>очередь</li><li>дек (двусвязная очередь)</li><li>строка</li></ul></li><li><code>Списковые</code> — логический порядок данных определяется указателями. Любая списковая структура представляет собой набор элементов, каждый из которых состоит из двух полей: в одном из них размещен элемент данных или указатель на него, а в другом — указатель на следующий элемент списка.</li></ul></li></ul>',19),c=[t];function d(r,s,n,u,h,p){return a(),e("div",null,c)}const f=l(o,[["render",d]]);export{m as __pageData,f as default};
