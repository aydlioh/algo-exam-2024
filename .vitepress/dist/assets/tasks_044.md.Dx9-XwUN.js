import{_ as t,c as a,o as s,a2 as e}from"./chunks/framework.C94oF1kp.js";const o="/assets/9.JEYhIxYe.png",m=JSON.parse('{"title":"Обход графа. Поиск в ширину. Алгоритм BFS.","description":"","frontmatter":{},"headers":[],"relativePath":"tasks/044.md","filePath":"tasks/044.md"}'),r={name:"tasks/044.md"},i=e('<h1 id="обход-графа-поиск-в-ширину-алгоритм-bfs" tabindex="-1">Обход графа. Поиск в ширину. Алгоритм BFS. <a class="header-anchor" href="#обход-графа-поиск-в-ширину-алгоритм-bfs" aria-label="Permalink to &quot;Обход графа. Поиск в ширину. Алгоритм BFS.&quot;">​</a></h1><h2 id="определение" tabindex="-1">Определение <a class="header-anchor" href="#определение" aria-label="Permalink to &quot;Определение&quot;">​</a></h2><p><strong>Обход графа</strong> - это процесс посещения всех вершин графа в определённом порядке. Существует несколько способов обхода графа, один из которых - <code>поиск в ширину (Breadth-First Search, BFS)</code>.</p><h2 id="алгоритм-bfs" tabindex="-1">Алгоритм BFS <a class="header-anchor" href="#алгоритм-bfs" aria-label="Permalink to &quot;Алгоритм BFS&quot;">​</a></h2><p><strong>Поиск в ширину</strong> - это алгоритм обхода графа, который посещает все вершины графа, начиная с заданной вершины, и двигается в ширину, то есть посещает все соседние вершины до тех пор, пока не будет достигнута цель или не будет посещена вся графа.</p><p><strong>Алгоритм BFS</strong> работает следующим образом:</p><ol><li>Создается очередь, в которую добавляется стартовая вершина. Пока очередь не пуста, выполняются следующие шаги:</li><li>Извлекается вершина из очереди.</li><li>Если вершина не была посещена ранее, она помечается как посещенная.</li><li>Все соседние вершины, которые не были посещены ранее, добавляются в очередь</li><li>Алгоритм продолжается до тех пор, пока очередь не будет пуста.</li></ol><p><strong>Сложность O(n+m), где n и m - кол-во вершин и ребер соответственно.</strong></p><p><strong>Преимущества BFS</strong></p><ul><li>BFS является эффективным алгоритмом для поиска кратчайшего пути в неориентированном графе.</li><li>BFS может быть использован для поиска связанных компонентов в графе.</li><li>BFS может быть использован для поиска циклов в графе.</li></ul><p><strong>Недостатки BFS</strong></p><ul><li>BFS может быть медленным для очень больших графов.</li><li>BFS не может быть использован для поиска кратчайшего пути в ориентированном графе.</li></ul><p><img src="'+o+'" alt=""></p>',13),l=[i];function n(c,_,p,d,h,S){return s(),a("div",null,l)}const f=t(r,[["render",n]]);export{m as __pageData,f as default};
