import{_ as t,c as a,o as s,a2 as o}from"./chunks/framework.C94oF1kp.js";const e="/assets/13.2C9q2O-Y.png",r="/assets/12.BZu1HbU1.png",f=JSON.parse('{"title":"Топологическая сортировка.","description":"","frontmatter":{},"headers":[],"relativePath":"tasks/047.md","filePath":"tasks/047.md"}'),n={name:"tasks/047.md"},i=o('<h1 id="топологическая-сортировка" tabindex="-1">Топологическая сортировка. <a class="header-anchor" href="#топологическая-сортировка" aria-label="Permalink to &quot;Топологическая сортировка.&quot;">​</a></h1><h2 id="определение" tabindex="-1">Определение <a class="header-anchor" href="#определение" aria-label="Permalink to &quot;Определение&quot;">​</a></h2><p><strong>Топологическая сортировка</strong> - это алгоритмический процесс упорядочения вершин ориентированного ациклического графа (DAG) таким образом, что все направленные ребра идут от вершин с меньшим порядковым номером к вершинам с большим порядковым номером. Другими словами, любое ребро должно идти из меньшей вершины в большую.</p><h2 id="идея" tabindex="-1">Идея <a class="header-anchor" href="#идея" aria-label="Permalink to &quot;Идея&quot;">​</a></h2><p><strong>Идея:</strong> чтобы посетить текущую вершину, нужно посетить её соседей, для соседей аналогично, таким образом доходим до крайней вершины без соседа.</p><p><strong>Вот как работает процесс топологической сортировки:</strong></p><ol><li>Для каждой вершины графа, если та еще не посещена, вызываем алгоритм сортировки.</li><li>Помечаем вершину как посещенную, обращаемся ко всем соседям (вершинам в которые идут рёбра от текущей вершины), рекурсивно вызываем алгоритм сортировки для этих вершин.</li><li>Заносим посещенную вершину в стек.</li></ol><p><strong>Сложность соответствует поиску в глубину:  O(n + m), вершины + ребра.</strong></p><p>Таким способом перебора в стек первыми попадут вершины, у которых нет соседей (нет исходящий ребер), затем 1 исходящее ребро и т.д.</p><p><strong>Вытащив вершины из стека, мы получим их в отсортированном по возрастанию порядке, относительно кол-ва входящих в вершину ребер. Заменив номера вершин на соответствующие им индексы, мы получим топологически отсортированный граф, где ребра будут идти от меньшей вершины к большей.</strong></p><p><img src="'+e+'" alt=""></p><p><img src="'+r+'" alt=""></p><p><strong>Пример</strong> При создании карты сайта с древовидной системой разделов.</p>',13),p=[i];function _(l,c,d,h,g,m){return s(),a("div",null,p)}const k=t(n,[["render",_]]);export{f as __pageData,k as default};
