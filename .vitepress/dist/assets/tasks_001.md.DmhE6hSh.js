import{_ as e,c as a,o,a2 as t}from"./chunks/framework.C94oF1kp.js";const m=JSON.parse('{"title":"Алгоритм и его свойства","description":"","frontmatter":{},"headers":[],"relativePath":"tasks/001.md","filePath":"tasks/001.md"}'),r={name:"tasks/001.md"},c=t('<h1 id="алгоритм-и-его-своиства" tabindex="-1">Алгоритм и его свойства <a class="header-anchor" href="#алгоритм-и-его-своиства" aria-label="Permalink to &quot;Алгоритм и его свойства&quot;">​</a></h1><h2 id="определение-алгоритма" tabindex="-1">Определение Алгоритма <a class="header-anchor" href="#определение-алгоритма" aria-label="Permalink to &quot;Определение Алгоритма&quot;">​</a></h2><p><strong>Алгоритм</strong> - последовательность действий для исполнителя, записанная на формальном языке и приводящая к заданной цели за конечное время.</p><p><strong>Алгоритм</strong> - конечная совокупность точно заданных <code>правил</code> решения задач или набор <code>инструкций</code>, описывающих порядок действий исполнителя для решения некоторой задачи.</p><h2 id="основные-своиства-алгоритмов" tabindex="-1">Основные свойства алгоритмов <a class="header-anchor" href="#основные-своиства-алгоритмов" aria-label="Permalink to &quot;Основные свойства алгоритмов&quot;">​</a></h2><ul><li><code>Результативность</code> - исполнитель алгоритма должен уметь решать поставленную задачу</li><li><code>Определенность</code> - каждое правило алгоритма должно быть четким и определенным во всех возможных ситуациях</li><li><code>Конечность</code> - алгоритм должен приводить к решению задачи за конечное число шагов для любых входных данных</li><li><code>Массовость</code> - алгоритм решения задачи разрабатывается в общем виде, т. е. он должен быть применим для некоторого класса задач, различающихся лишь исходными данными</li><li><code>Эффективность</code> - это свойство алгоритма, которое связано с вычислительными ресурсами, используемыми алгоритмом. Алгоритм должен быть проанализирован с целью определения необходимых алгоритму ресурсов</li></ul><h2 id="сложность-алгоритма" tabindex="-1">Сложность алгоритма <a class="header-anchor" href="#сложность-алгоритма" aria-label="Permalink to &quot;Сложность алгоритма&quot;">​</a></h2><p><strong>Сложность алгоритма</strong> — это необходимый для его исполнения объём ресурсов. Чем алгоритм сложнее, тем больше машинных ресурсов он потребляет.</p><p><strong>Временная сложность((O)-нотация):</strong> Описывает, как изменяется время выполнения алгоритма с увеличением размера входных данных.</p><p><strong>Пространственная сложность:</strong> Аналогична временной сложности, но относится к использованию памяти.</p><h2 id="виды-сложности-алгоритмов" tabindex="-1">Виды сложности алгоритмов <a class="header-anchor" href="#виды-сложности-алгоритмов" aria-label="Permalink to &quot;Виды сложности алгоритмов&quot;">​</a></h2><ul><li><code>Комбинаторная</code> - минимальное число элементов для реализации алгоритма в виде вычислительных устройств.</li><li><code>Относительная</code> - длина описания алгоритма на формальном языке</li><li><code>Вычислительная</code> - количество элементарных операций для неких входных данных</li></ul><p>O(1), O(n), O(n^2), O(n^3), O(2^n), O(n!)</p>',13),i=[c];function l(d,n,s,h,_,p){return o(),a("div",null,i)}const f=e(r,[["render",l]]);export{m as __pageData,f as default};
