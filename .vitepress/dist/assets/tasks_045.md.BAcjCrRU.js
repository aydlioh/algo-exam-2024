import{_ as a,c as t,o as e,a2 as s}from"./chunks/framework.C94oF1kp.js";const D=JSON.parse('{"title":"Обход графа. Поиск в глубину. Алгоритм DFS.","description":"","frontmatter":{},"headers":[],"relativePath":"tasks/045.md","filePath":"tasks/045.md"}'),o={name:"tasks/045.md"},l=s('<h1 id="обход-графа-поиск-в-глубину-алгоритм-dfs" tabindex="-1">Обход графа. Поиск в глубину. Алгоритм DFS. <a class="header-anchor" href="#обход-графа-поиск-в-глубину-алгоритм-dfs" aria-label="Permalink to &quot;Обход графа. Поиск в глубину. Алгоритм DFS.&quot;">​</a></h1><h2 id="определение" tabindex="-1">Определение <a class="header-anchor" href="#определение" aria-label="Permalink to &quot;Определение&quot;">​</a></h2><p><strong>Поиск в глубину</strong> - это алгоритм обхода графа, который исследует путь до тех пор, пока не достигнет самой глубокой вершины, а затем возвращается к предыдущей вершине и исследует другие пути.</p><h2 id="алгоритм-dfs" tabindex="-1">Алгоритм DFS <a class="header-anchor" href="#алгоритм-dfs" aria-label="Permalink to &quot;Алгоритм DFS&quot;">​</a></h2><p><strong>Алгоритм DFS</strong> работает следующим образом:</p><ol><li>Начиная с заданной стартовой вершины, идти как можно глубже по каждому пути, пока не будет достигнута конечная вершина или пока не будут исследованы все возможные пути.</li><li>Если вершина не была посещена ранее, она помечается как посещенная.</li><li>Рекурсивно повторять шаги 1 и 2 для каждой посещенной соседней вершины.</li></ol><p>Сложность алгоритма DFS также зависит от количества вершин и ребер в графе, может быть выражена как O(n+m), где n - количество вершин, а m - количество ребер.</p><p><strong>Преимущества DFS:</strong></p><ul><li>DFS может быть эффективным для поиска пути между двумя вершинами в графе.</li><li>DFS может быть использован для топологической сортировки графа.</li><li>DFS может быть полезен при поиске циклов в графе.</li></ul><p><strong>Недостатки DFS:</strong></p><ul><li>DFS может зациклиться в бесконечном цикле, если граф содержит циклы.</li><li>DFS не для нахождения кратчайшего пути между вершинами.</li><li>DFS может потребовать больше памяти при работе с глубокими графами.</li></ul><p><strong>Использует стек вместо очереди, благодаря чему и получается такой принцип обхода.</strong></p>',12),r=[l];function i(n,_,d,c,p,h){return e(),t("div",null,r)}const f=a(o,[["render",i]]);export{D as __pageData,f as default};
