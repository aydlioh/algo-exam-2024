import{_ as e,c as t,o as a,a2 as o}from"./chunks/framework.C94oF1kp.js";const u=JSON.parse('{"title":"Обобщенный быстрый поиск.","description":"","frontmatter":{},"headers":[],"relativePath":"tasks/029.md","filePath":"tasks/029.md"}'),s={name:"tasks/029.md"},l=o('<h1 id="обобщенныи-быстрыи-поиск" tabindex="-1">Обобщенный быстрый поиск. <a class="header-anchor" href="#обобщенныи-быстрыи-поиск" aria-label="Permalink to &quot;Обобщенный быстрый поиск.&quot;">​</a></h1><h2 id="определение" tabindex="-1">Определение <a class="header-anchor" href="#определение" aria-label="Permalink to &quot;Определение&quot;">​</a></h2><p><strong>Основная идея</strong> - разбиение пространства ключей на независимые подпространства.</p><ul><li>При таком независимом разбиении на M подпространств сложность уменьшается.</li><li>При увеличении M, время поиска уменьшается, затраты памяти увеличиваются.</li><li>При M ~ N имеется зона оптимальности, поиск уже проводится за O(1), а память O(N).</li></ul><ol><li>Предположим у нас есть база данных городов с их численностью.</li></ol><p><img src="https://lh7-us.googleusercontent.com/docsz/AD_4nXf9U99fPFOSIVNTdzJHzmme6O_dHs0GlUhrPI3PwgAy9kSe7qLQNkVSMCIg7w6U_lfxvYi4XCaH-kpk0An3ejHel1jAT031Zid45OKqqrat2uEPScdqurxeZ8pPgk3qREjZwNYggxX93HVA0zcX6rFjaug?key=9gziK4gT-jwK64_BpOeehQ" alt=""></p><ol start="2"><li>Заменим списки для каждой буквы, на деревья быстрого поиска, с учетом численности.</li></ol><p><img src="https://lh7-us.googleusercontent.com/docsz/AD_4nXe8YbrJMHGX_2aHXaAelLd8LQEQqBSUBy-H3EJI4rw33CAhUWB90OuBdzq1GSYSW5VE07U3F1pUlrnHpYqIQGL6Rc-WoW8zXLpSzG4PPPKdvIP2mnHZdqUvpjDRAygp2ZFloPVVNujwrw4BHq2Z4sUfnC9c?key=9gziK4gT-jwK64_BpOeehQ" alt=""></p>',8),r=[l];function i(n,c,_,d,p,h){return a(),t("div",null,r)}const m=e(s,[["render",i]]);export{u as __pageData,m as default};
