import{_ as a,c as t,o as e,a2 as s}from"./chunks/framework.C94oF1kp.js";const o="/assets/18.Czy_vG7D.png",u=JSON.parse('{"title":"Алгоритм Беллмана-Форда","description":"","frontmatter":{},"headers":[],"relativePath":"tasks/053.md","filePath":"tasks/053.md"}'),r={name:"tasks/053.md"},n=s('<h1 id="алгоритм-беллмана-форда" tabindex="-1">Алгоритм Беллмана-Форда <a class="header-anchor" href="#алгоритм-беллмана-форда" aria-label="Permalink to &quot;Алгоритм Беллмана-Форда&quot;">​</a></h1><h2 id="определение" tabindex="-1">Определение <a class="header-anchor" href="#определение" aria-label="Permalink to &quot;Определение&quot;">​</a></h2><p><strong>Алгоритм Беллмана-Форда</strong> используется для нахождения кратчайших путей от одной начальной вершины до всех остальных вершин во взвешенном ориентированном графе, даже если в нем присутствуют ребра с отрицательными весами.</p><h2 id="алгоритм" tabindex="-1">Алгоритм <a class="header-anchor" href="#алгоритм" aria-label="Permalink to &quot;Алгоритм&quot;">​</a></h2><ol><li><strong>Инициализация:</strong> Установите расстояние от начальной вершины до всех остальных вершин равным бесконечности, за исключением начальной вершины, у которой расстояние равно 0.</li><li><strong>Релаксация ребер:</strong> Проходите по всем ребрам графа и обновляйте расстояния до каждой вершины, если найден более короткий путь через текущее ребро. Для каждого ребра (u, v) с весом w, обновите расстояние до вершины v как min(distance[v], distance[u] + w).</li><li><strong>Повторение:</strong> Повторите шаг 2 n-1 раз, где n - количество вершин в графе. Это необходимо для того, чтобы гарантировать нахождение всех кратчайших путей.</li><li><strong>Проверка наличия циклов с отрицательным весом:</strong> После n-1 итераций проверьте все ребра еще раз. Если какое-либо ребро может быть релаксировано, это означает наличие цикла с отрицательным весом в графе.</li><li><strong>Завершение:</strong> По завершении работы алгоритма, расстояния от начальной вершины до всех остальных будут содержаться в массиве distance.</li></ol><p><strong>Алгоритм Беллмана-Форда может быть использован для нахождения кратчайших путей в графах с отрицательными ребрами, но его сложность составляет O(V*E), где V - количество вершин, E - количество ребер.</strong></p><h2 id="пример" tabindex="-1">Пример <a class="header-anchor" href="#пример" aria-label="Permalink to &quot;Пример&quot;">​</a></h2><p><img src="'+o+'" alt=""></p>',8),i=[n];function l(c,_,d,h,p,g){return e(),t("div",null,i)}const f=a(r,[["render",l]]);export{u as __pageData,f as default};
