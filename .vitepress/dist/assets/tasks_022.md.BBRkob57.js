import{_ as t,c as a,o,a2 as s}from"./chunks/framework.C94oF1kp.js";const e="/assets/7.CVelfk8C.png",f=JSON.parse('{"title":"Двоичная куча, HeapSort","description":"","frontmatter":{},"headers":[],"relativePath":"tasks/022.md","filePath":"tasks/022.md"}'),r={name:"tasks/022.md"},n=s('<h1 id="двоичная-куча-heapsort" tabindex="-1">Двоичная куча, HeapSort <a class="header-anchor" href="#двоичная-куча-heapsort" aria-label="Permalink to &quot;Двоичная куча, HeapSort&quot;">​</a></h1><h2 id="определения" tabindex="-1">Определения <a class="header-anchor" href="#определения" aria-label="Permalink to &quot;Определения&quot;">​</a></h2><p><strong>Двоичная куча</strong> — это полное бинарное дерево, которое удовлетворяет свойству кучи. В таком дереве все уровни, кроме последнего, полностью заполнены, а узлы последнего уровня располагаются слева направо без пропусков.</p><ul><li><strong>Полнота:</strong> Все уровни, кроме, возможно, последнего, полностью заполнены, а узлы последнего уровня располагаются слева направо.</li><li><strong>Свойство кучи:</strong> Для максимальной кучи каждый узел больше или равен своим потомкам; для минимальной кучи каждый узел меньше или равен своим потомкам.</li></ul><p><strong>HeapSort</strong> — это эффективный алгоритм сортировки, основанный на сравнении, который использует структуру данных двоичной кучи.</p><ol><li><strong>Построение максимальной кучи:</strong> Преобразуйте неотсортированный массив в максимальную кучу, где каждый узел больше или равен своим потомкам.</li><li><strong>Извлечение элементов из кучи:</strong> Последовательно удаляйте наибольший элемент из кучи (корень кучи) и перемещайте его в конец массива. Каждый раз уменьшайте размер кучи на один.</li><li><strong>Восстановление кучи:</strong> После удаления корня перемещайте последний элемент кучи на его место и восстанавливайте структуру кучи.</li></ol><p><img src="'+e+'" alt=""></p>',7),i=[n];function l(_,c,p,d,h,g){return o(),a("div",null,i)}const u=t(r,[["render",l]]);export{f as __pageData,u as default};
