import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.C94oF1kp.js";const o=JSON.parse('{"title":"Сортировка слиянием.","description":"","frontmatter":{},"headers":[],"relativePath":"tasks/013.md","filePath":"tasks/013.md"}'),h={name:"tasks/013.md"},l=n(`<h1 id="сортировка-слиянием" tabindex="-1">Сортировка слиянием. <a class="header-anchor" href="#сортировка-слиянием" aria-label="Permalink to &quot;Сортировка слиянием.&quot;">​</a></h1><p><strong>Сортировка слиянием</strong> использует подход <code>«разделяй и властвуй»</code>. Это значит, что он делит проблему (массив) на более мелкие части, решает каждую часть отдельно, а затем объединяет (сливает) решения для получения окончательного результат.</p><p>Сортировка слиянием имеет среднюю и худшую асимптотическую сложность <code>O(n log n)</code>, где n - размер массива. Это делает ее одной из самых эффективных алгоритмов сортировки для больших массивов. Кроме того, сортировка слиянием является стабильной, т.е. она сохраняет относительный порядок равных элементов в исходном массиве.</p><h2 id="разделяи" tabindex="-1">Разделяй <a class="header-anchor" href="#разделяи" aria-label="Permalink to &quot;Разделяй&quot;">​</a></h2><p><strong>Разделение массива пополам:</strong> Сначала массив делится на две примерно равные части. Этот процесс продолжается рекурсивно для каждой половины, пока массивы не станут размером 1 или 0 (такие массивы считаются уже отсортированными).</p><p>Например, массив [38, 27, 43, 3, 9, 82, 10] делится на: [38, 27, 43] и [3, 9, 82, 10]</p><p><strong>Рекурсивное деление:</strong> Каждая из этих частей снова делится на две части:</p><p>[38, 27, 43] делится на [38] и [27, 43] [27, 43] делится на [27] и [43] [3, 9, 82, 10] делится на [3, 9] и [82, 10] [3, 9] делится на [3] и [9] [82, 10] делится на [82] и [10]</p><p><strong>Остановка деления:</strong> Когда массивы состоят из одного элемента, деление прекращается. Таким образом, мы получаем несколько массивов размером 1.</p><h2 id="властвуи" tabindex="-1">Властвуй <a class="header-anchor" href="#властвуи" aria-label="Permalink to &quot;Властвуй&quot;">​</a></h2><p><strong>Слияние отсортированных массивов:</strong> Теперь начинается процесс слияния. Два отсортированных массива объединяются в один отсортированный массив.</p><p>Например: [38] и [27] сливаются в [27, 38] [27, 38] и [43] сливаются в [27, 38, 43] [3] и [9] сливаются в [3, 9] [82] и [10] сливаются в [10, 82] [3, 9] и [10, 82] сливаются в [3, 9, 10, 82]</p><p><strong>Продолжение слияния:</strong> Продолжается слияние до тех пор, пока не будет получен один отсортированный массив:</p><p>[27, 38, 43] и [3, 9, 10, 82] сливаются в [3, 9, 10, 27, 38, 43, 82]</p><h2 id="алгоритм" tabindex="-1">Алгоритм <a class="header-anchor" href="#алгоритм" aria-label="Permalink to &quot;Алгоритм&quot;">​</a></h2><p><strong>Сортировка слиянием</strong> состоит из следующих шагов:</p><ol><li>Если размер массива равен 1, то он уже отсортирован, и мы возвращаем его.</li><li>Разбиваем массив на два подмассива примерно одинакового размера.</li><li>Рекурсивно применяем сортировку слиянием к каждому из подмассивов.</li><li>Объединяем два отсортированных подмассива в один отсортированный массив, используя алгоритм слияния.</li></ol><p><strong>Алгоритм слияния</strong> работает следующим образом:</p><ol><li>Создаем новый массив для хранения отсортированного результата.</li><li>Проходим по двум отсортированным подмассивам, сравнивая их элементы и добавляя меньший элемент в новый массив.</li><li>Когда один из подмассивов закончится, добавляем все оставшиеся элементы другого подмассива в новый массив.</li></ol><p><strong>Работает на двух указателях</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mergeSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr):  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        leftArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[:mid]  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rightArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[mid:]  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mergeSort(leftArr)  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mergeSort(rightArr)  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(leftArr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rightArr):  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> leftArr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rightArr[j]:  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                arr[k] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> leftArr[i]  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                arr[k] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rightArr[j]  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(leftArr):  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            arr[k] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> leftArr[i]  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rightArr):  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            arr[k] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rightArr[j]  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div>`,21),k=[l];function t(p,e,r,E,d,g){return a(),i("div",null,k)}const c=s(h,[["render",t]]);export{o as __pageData,c as default};
