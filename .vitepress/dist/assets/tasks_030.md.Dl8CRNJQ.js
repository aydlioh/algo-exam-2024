import{_ as t,c as o,o as r,a2 as s}from"./chunks/framework.C94oF1kp.js";const m=JSON.parse('{"title":"Хеш-функции. Хеш-таблицы с прямой адресацией.","description":"","frontmatter":{},"headers":[],"relativePath":"tasks/030.md","filePath":"tasks/030.md"}'),a={name:"tasks/030.md"},n=s('<h1 id="хеш-функции-хеш-таблицы-с-прямои-адресациеи" tabindex="-1">Хеш-функции. Хеш-таблицы с прямой адресацией. <a class="header-anchor" href="#хеш-функции-хеш-таблицы-с-прямои-адресациеи" aria-label="Permalink to &quot;Хеш-функции. Хеш-таблицы с прямой адресацией.&quot;">​</a></h1><h2 id="определение" tabindex="-1">Определение <a class="header-anchor" href="#определение" aria-label="Permalink to &quot;Определение&quot;">​</a></h2><p><strong>Хеш-функция</strong> — это функция, которая принимает на вход данные (ключ) и возвращает число, называемое хеш-значением или хеш-кодом. Это число используется для определения позиции ключа в хеш-таблице.</p><h2 id="своиства-и-требования" tabindex="-1">Свойства и требования <a class="header-anchor" href="#своиства-и-требования" aria-label="Permalink to &quot;Свойства и требования&quot;">​</a></h2><ol><li><strong>Детерминированность:</strong> Одинаковый вход должен всегда давать одинаковый выход.</li><li><strong>Эффективность:</strong> Хеш-функция должна быть вычисляема за постоянное время O(1).</li><li><strong>Равномерность:</strong> Хеш-функция должна равномерно распределять ключи по всей таблице, чтобы минимизировать количество коллизий.</li><li><strong>Необратимость:</strong> Невозможность восстановления ключа по значению его функции.</li><li><strong>Лавинность:</strong> при изменении одного бита последовательности меняется значительное кол-во выходных бит.</li></ol><h2 id="коллизия" tabindex="-1">Коллизия <a class="header-anchor" href="#коллизия" aria-label="Permalink to &quot;Коллизия&quot;">​</a></h2><p><strong>Коллизия</strong> происходит, когда два различных ключа хешируются в одну и ту же позицию. Существует несколько методов для разрешения коллизий:</p><ol><li><strong>Метод цепочек (Chaining):</strong> Каждая ячейка таблицы хранит список всех элементов, которые хешируются в эту ячейку.</li><li><strong>Открытая адресация (Open Addressing):</strong> Все элементы хранятся в самой таблице, а в случае коллизии используется определённая стратегия для поиска следующей свободной ячейки (например, линейное или квадратичное пробирование).</li></ol><p><strong>Хеш-таблицы с прямой адресацией</strong> — структура данных, где метод адресации характеризуется следующими словами: когда каждая ячейка массива H является указателем на связный список пар ключ-значение, соответствующих одному и тому же хеш-значению ключа. Коллизии просто приводят к тому, что появляются списки длиной более одного элемента.</p><p>При коллизии во время создания элемента создаётся связный список конфликтующих. Технически можно создать любую поисковую структуру данных. Обычно стараются, чтобы количество элементов во вторичной структуре данных оставалось небольшим, поэтому простой односвязный список — хороший выбор.</p><p><img src="https://lh7-us.googleusercontent.com/docsz/AD_4nXftz5DhXzhr5N8sFVyewXSUbErGaK-sdu46Tbb-6gAYFIe6_UtPT6XBfy0EbWdbW63rRp89LPtxcUd6-w6UqTekQGEEW1GnJ7S62A97GpmMm7Ackb_8zbY64ToYL7rDikhrGhxzzhR5wwAMYO2VGYONoCT5?key=9gziK4gT-jwK64_BpOeehQ" alt=""></p><p><strong>Прямая адресация</strong></p><ol><li><strong>Инициализация:</strong> Создается массив (хеш-таблица) достаточного размера для всех возможных ключей.</li><li><strong>Вставка:</strong> Ключ используется напрямую как индекс для хранения значения.</li><li><strong>Поиск:</strong> Ключ используется напрямую как индекс для получения значения.</li><li><strong>Удаление:</strong> Ключ используется напрямую как индекс для удаления значения.</li></ol>',13),e=[n];function i(l,g,h,c,_,d){return r(),o("div",null,e)}const u=t(a,[["render",i]]);export{m as __pageData,u as default};
