import{_ as t,c as o,o as a,a2 as r}from"./chunks/framework.C94oF1kp.js";const m=JSON.parse('{"title":"Внешняя сортировка слиянием. Сортировка сериями.","description":"","frontmatter":{},"headers":[],"relativePath":"tasks/016.md","filePath":"tasks/016.md"}'),s={name:"tasks/016.md"},e=r('<h1 id="внешняя-сортировка-слиянием-сортировка-сериями" tabindex="-1">Внешняя сортировка слиянием. Сортировка сериями. <a class="header-anchor" href="#внешняя-сортировка-слиянием-сортировка-сериями" aria-label="Permalink to &quot;Внешняя сортировка слиянием. Сортировка сериями.&quot;">​</a></h1><h2 id="определения" tabindex="-1">Определения <a class="header-anchor" href="#определения" aria-label="Permalink to &quot;Определения&quot;">​</a></h2><p><strong>Алгоритм внешней сортировки слиянием</strong>, также известный как <code>сортировка сериями</code>, используется для сортировки больших наборов данных, которые не помещаются полностью в оперативной памяти компьютера и должны быть обработаны с использованием внешней памяти, такой как диск.</p><p><strong>Основная идея внешней сортировки слиянием</strong> заключается в разделении исходного набора данных на небольшие блоки, которые могут быть обработаны в оперативной памяти, и последующем слиянии этих блоков в отсортированный порядок, используя внешнюю память (например, жесткий диск).</p><ol><li><strong>Разделение на серии</strong> - исходный набор данных разбивается на несколько блоков, называемых сериями, которые могут быть обработаны в оперативной памяти.</li><li><strong>Внутренняя сортировка серий</strong> - каждая серия сортируется внутренним алгоритмом сортировки, таким как сортировка вставками или сортировка слиянием. Это позволяет установить частичный порядок внутри каждой серии.</li><li><strong>Слияние серий</strong> - отсортированные серии сливаются в более крупные блоки, сохраняя отсортированный порядок. Этот процесс продолжается до тех пор, пока все серии не будут объединены в один отсортированный набор данных.</li><li><strong>Повторение слияний при необходимости</strong> - если в результате слияния формируется более крупная серия, чем может быть обработано в оперативной памяти, эта серия разбивается на более мелкие серии, которые затем сортируются и сливаются с другими сериями.</li></ol><h2 id="пример" tabindex="-1">Пример <a class="header-anchor" href="#пример" aria-label="Permalink to &quot;Пример&quot;">​</a></h2><p>Предположим, у нас есть большой файл с данными, который не может быть загружен полностью в оперативную память компьютера. Мы хотим отсортировать этот файл.</p><ol><li><strong>Разделение на серии</strong> - файл разбивается на несколько блоков, каждый из которых может быть обработан в оперативной памяти. Размер блоков определяется доступной оперативной памятью.</li><li><strong>Внутренняя сортировка серий</strong> - каждый блок считывается в память, и внутренним алгоритмом сортировки, например, сортировкой слиянием, отсортированы его элементы.</li><li><strong>Слияние серий</strong> - отсортированные блоки сливаются попарно в большие отсортированные блоки, сохраняя отсортированный порядок.</li><li><strong>Повторение слияний при необходимости</strong> - если после слияния размер полученной серии превышает доступную оперативную память, серия разбивается на более мелкие блоки, которые сортируются и сливаются с другими сериями.</li></ol>',8),n=[e];function i(l,_,c,d,g,h){return a(),o("div",null,n)}const f=t(s,[["render",i]]);export{m as __pageData,f as default};
