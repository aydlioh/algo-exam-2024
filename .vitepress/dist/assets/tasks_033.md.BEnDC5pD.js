import{_ as l,c as t,o as a,a2 as i}from"./chunks/framework.C94oF1kp.js";const g=JSON.parse('{"title":"Алгоритм Карпа-Рабина.","description":"","frontmatter":{},"headers":[],"relativePath":"tasks/033.md","filePath":"tasks/033.md"}'),o={name:"tasks/033.md"},r=i('<h1 id="алгоритм-карпа-рабина" tabindex="-1">Алгоритм Карпа-Рабина. <a class="header-anchor" href="#алгоритм-карпа-рабина" aria-label="Permalink to &quot;Алгоритм Карпа-Рабина.&quot;">​</a></h1><h2 id="определение" tabindex="-1">Определение <a class="header-anchor" href="#определение" aria-label="Permalink to &quot;Определение&quot;">​</a></h2><p><strong>Алгоритм Карпа-Рабина</strong> - это алгоритм для поиска подстроки в строке, использующий хеширование. Основная идея алгоритма заключается в том, чтобы вычислять хеш-значение подстроки и сравнивать его с хеш-значением искомой подстроки. Это позволяет ускорить поиск, так как сравнение хеш-значений быстрее, чем сравнение символов в подстроке.</p><h2 id="принцип-работы" tabindex="-1">Принцип работы <a class="header-anchor" href="#принцип-работы" aria-label="Permalink to &quot;Принцип работы&quot;">​</a></h2><ol><li><p><strong>Хеширование подстроки и искомой подстроки:</strong></p><ul><li>Вычисляется хеш-значение искомой подстроки (шаблона).</li><li>Хеш-значение каждой подстроки строки также вычисляется с использованием хеш-функции.</li></ul></li><li><p><strong>Сравнение хеш-значений:</strong></p><ul><li>Если хеш-значения совпадают, производится дополнительная проверка символов для подтверждения совпадения.</li><li>Если хеш-значения не совпадают, подстрока отбрасывается как несовпадающая.</li></ul></li><li><p><strong>Слайдинг окно:</strong></p><ul><li>При каждой итерации окно сдвигается на один символ вправо (или влево), и вычисляется хеш-значение новой подстроки.</li><li>Если хеш-значения совпадают, выполняется дополнительная проверка символов.</li></ul></li><li><p><strong>Дополнительная проверка символов:</strong></p><ul><li>Если хеш-значения совпадают, но символы подстроки и шаблона не совпадают, считается, что нет совпадения.</li><li>Если все символы совпадают, считается, что найдено совпадение.</li></ul></li></ol><h2 id="пример" tabindex="-1">Пример <a class="header-anchor" href="#пример" aria-label="Permalink to &quot;Пример&quot;">​</a></h2><p>Допустим, у нас есть строка ABCDE и мы ищем подстроку CD.</p><ol><li>Шаг 1: <strong>Преобразуем буквы в числа</strong> (например, A = 1, B = 2 и так далее).</li><li>Шаг 2: <strong>Считаем хэш для CD и для каждого кусочка в строке:</strong></li></ol><ul><li>Хэш для CD = (C = 3) + (D = 4) = 3 + 4 = 7</li><li>Хэш для AB = 1 + 2 = 3 (не совпадает)</li><li>Хэш для BC = 2 + 3 = 5 (не совпадает)</li><li>Хэш для CD = 3 + 4 = 7 (совпадает!)</li></ul><ol start="3"><li>Шаг 3: <strong>Проверяем совпадение:</strong> Сравниваем подстроку CD и кусочек строки CD — они совпадают! Таким образом, мы нашли нужную подстроку в строке.</li></ol>',10),e=[r];function s(n,_,c,h,d,p){return a(),t("div",null,e)}const m=l(o,[["render",s]]);export{g as __pageData,m as default};
