import{_ as s,c as i,o as a,a2 as h}from"./chunks/framework.C94oF1kp.js";const o=JSON.parse('{"title":"Сортировка вставками. Сортировка Шелла.","description":"","frontmatter":{},"headers":[],"relativePath":"tasks/009.md","filePath":"tasks/009.md"}'),n={name:"tasks/009.md"},l=h(`<h1 id="сортировка-вставками-сортировка-шелла" tabindex="-1"><strong>Сортировка вставками. Сортировка Шелла.</strong> <a class="header-anchor" href="#сортировка-вставками-сортировка-шелла" aria-label="Permalink to &quot;**Сортировка вставками. Сортировка Шелла.**&quot;">​</a></h1><h2 id="сортировка-вставками" tabindex="-1">Сортировка вставками <a class="header-anchor" href="#сортировка-вставками" aria-label="Permalink to &quot;Сортировка вставками&quot;">​</a></h2><p><strong>Сортировка вставками (Insertion sort)</strong> - это алгоритм сортировки, основанный на последовательном просмотре элементов массива и их вставке в отсортированную часть массива.</p><p><code>Худшее O(n^2)</code><code>Cреднее O(n^2)</code></p><ol><li>Берем первый элемент массива и считаем, что он отсортирован.</li><li>Берем второй элемент и сравниваем его с первым. Если он меньше, то меняем их местами.</li><li>Берем третий элемент и сравниваем его с предыдущими двумя. Если он меньше второго, то меняем их местами. Если он меньше первого, то меняем его место с первым.</li><li>Продолжаем этот процесс для всех элементов массива.</li></ol><p><img src="https://lh7-us.googleusercontent.com/docsz/AD_4nXcSmzz5Q6P8AkdedQ1keYdleNEGwl_Zz13ttiOJuVlHg9wbc5cFyeAfhFog9Zb2xcGzu0CYDGaHl2LVVKd20LbLaqz5xsuZUJGnqm9wXnvIh_8q8ZA-jhJ3Nxy5nxU_eqPONnqVphPskVNCZeLsJ0Uo0iVW?key=9gziK4gT-jwK64_BpOeehQ" alt=""></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> insertionSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr):  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n):  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[i]  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j]):  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j]  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current</span></span></code></pre></div><h2 id="сортировка-шелла" tabindex="-1">Сортировка Шелла <a class="header-anchor" href="#сортировка-шелла" aria-label="Permalink to &quot;Сортировка Шелла&quot;">​</a></h2><p><strong>Сортировка Шелла (Shell sort)</strong> - это алгоритм сортировки, который является улучшением сортировки вставками. Идея состоит в сравнивании не только стоящих рядом элементов, но и на определённом расстоянии.</p><p><code>Худшее O(n^2)</code><code>Лучшее O(n* log^2(n))</code></p><ol><li>Выбираем начальный инкремент h, который равен длине массива, деленной на 2.</li><li>Разбиваем массив на подмассивы, каждый из которых состоит из элементов, разделенных на h.</li><li>Сортируем каждый подмассив с помощью сортировки вставками.</li><li>Уменьшаем инкремент h в два раза и повторяем шаги 2-3, пока h не станет равным 1.</li><li>Сортируем массив с помощью сортировки вставками.</li></ol><p>Для понимания arr = [6, 5, 1, 0, 2, 4, 3]</p><ol><li>h = len(arr) // 2 =&gt; рассмотрим элементы [0], [0 + h], [0 + h + h] =&gt; =&gt; сортируем сортировкой вставками [0, 5, 1, 3, 2, 4, 6]</li><li>Смещаемся вправо =&gt; рассмотрим [1], [1 + h], [1 + h + h] (больше длины массива) =&gt; =&gt; сравниваем элементы [0, 2, 1, 3, 5, 4, 6]</li><li>Сравниваем так все элементы вплоть до [h], [h + h], уменьшаем шаг на 1</li><li>[0, 5, 1, 3, 2, 4, 6] =&gt; =&gt; [0, 5, 1, 3, 2, 4, 6] =&gt; и т.д. вплоть до шага h=1</li></ol><p><img src="https://lh7-us.googleusercontent.com/docsz/AD_4nXfC5zrBMhBbJP0NIYWvFBMAucoAHSouML4H-ZlcOyvww1uHwLjksHn5T4Vkg6epffeovljitQyZHg-piJZKHC6kNPH65Jjh3i_ug4VY3xV1m2fmUmeiGS34E029HQkO61dby7VEqJLNzrGLamUBCtWqzNo_?key=9gziK4gT-jwK64_BpOeehQ" alt=""></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shellSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr):  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(h, n):  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[i]  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h]:  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h]  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div>`,15),k=[l];function t(p,e,r,E,d,g){return a(),i("div",null,k)}const c=s(n,[["render",t]]);export{o as __pageData,c as default};
