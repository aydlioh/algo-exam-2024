import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.C94oF1kp.js";const c=JSON.parse('{"title":"Сортировка сравнением. Понятие инверсии. Сортировка пузырьком.","description":"","frontmatter":{},"headers":[],"relativePath":"tasks/008.md","filePath":"tasks/008.md"}'),n={name:"tasks/008.md"},h=t(`<h1 id="сортировка-сравнением-понятие-инверсии-сортировка-пузырьком" tabindex="-1">Сортировка сравнением. Понятие инверсии. Сортировка пузырьком. <a class="header-anchor" href="#сортировка-сравнением-понятие-инверсии-сортировка-пузырьком" aria-label="Permalink to &quot;Сортировка сравнением. Понятие инверсии. Сортировка пузырьком.&quot;">​</a></h1><h2 id="определения" tabindex="-1">Определения <a class="header-anchor" href="#определения" aria-label="Permalink to &quot;Определения&quot;">​</a></h2><p><strong>Алгоритм сортировки</strong> — это алгоритм для упорядочения элементов в списке. В случае, когда элемент списка имеет несколько полей, поле, служащее критерием порядка, называется ключом сортировки.</p><p><strong>Сортировка сравнением</strong> - это один из основных подходов к сортировке, который заключается в сравнении элементов массива и их перестановке в соответствии с порядком. <code>Сортировка пузырьком</code> - это один из простейших алгоритмов сортировки сравнением.</p><p>Понятие <strong>инверсии</strong> в сортировке означает пару элементов массива, которые находятся в неправильном порядке. Например, в массиве [3, 1, 2] имеется две инверсии: (3, 2) и (3, 1). <code>Чем меньше инверсий в массиве, тем ближе он к отсортированному состоянию.</code></p><h2 id="сортировка-пузырьком" tabindex="-1">Сортировка пузырьком <a class="header-anchor" href="#сортировка-пузырьком" aria-label="Permalink to &quot;Сортировка пузырьком&quot;">​</a></h2><p><strong>Идея</strong> - пока соседние элементы не в порядке, меняем их местами.</p><p>Работает путем последовательного сравнения соседних элементов массива и их перестановки, если они находятся в неправильном порядке. Алгоритм повторяет этот процесс несколько раз, пока массив не будет отсортирован. <strong>Сложность O(n^2)</strong></p><p><img src="https://lh7-us.googleusercontent.com/docsz/AD_4nXfB6AOCoiH_Tyl0A7fXisYwnUDtY6hx_m1-whjcv1HhmFK0S87W4Th3H-6C2ycnvu4Clvn2xlfnctiBxPo_V9W0du5cdvW8Z9Hjjbb1WYcCyBrfbQMuEG8_kc0z1JKurwJeNxv2P8kEmAiK-tvnSxdUtUCN?key=9gziK4gT-jwK64_BpOeehQ" alt=""></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				arr[j], arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], arr[j]</span></span></code></pre></div>`,10),k=[h];function l(p,e,r,d,E,o){return a(),i("div",null,k)}const y=s(n,[["render",l]]);export{c as __pageData,y as default};
